From 0969749417629b2bb3b8e78e22bae5c0dac0c85b Mon Sep 17 00:00:00 2001
From: Rishwanth Yeddula <rish@cpanel.net>
Date: Thu, 15 Jun 2017 13:23:10 -0500
Subject: [PATCH 6/6] Add new 'PassengerDisableHtaccess' directive

Case PIG-3283: Add a 'PassengerDisableHtaccess' directive that lets
server administrators to control whether mod_passenger should allow
the Passenger directives to be set in the .htaccess files.

Case PIG-3630: Ensure that the directives with handlers defined outside
the ConfigurationSetters code are properly checked and disallowed:

Directives that are handled via the 'DEFINE_DIR_STR_CONFIG_SETTER' macro:

    * PassengerAppRoot
    * UnionStationKey

Directives that are handled via the 'DEFINE_DIR_THREEWAY_CONFIG_SETTER' macro:

    * PassengerResolveSymlinksInDocumentRoot
    * PassengerAllowEncodedSlashes
    * UnionStationSupport
    * PassengerBufferResponse

Directives with custom handlers:

    * PassengerBaseURI
    * UnionStationFilter
---
 src/apache2_module/Configuration.cpp               | 26 ++++++++++++++++++++++
 src/apache2_module/Configuration.hpp               |  4 ++++
 src/apache2_module/ConfigurationFields.hpp         |  5 +++++
 .../ConfigurationSetters.cpp.cxxcodebuilder        | 19 ++++++++++++++++
 src/apache2_module/Hooks.cpp                       |  1 +
 5 files changed, 55 insertions(+)

diff --git a/src/apache2_module/Configuration.cpp b/src/apache2_module/Configuration.cpp
index 7b9ed36be..a2434b22f 100644
--- a/src/apache2_module/Configuration.cpp
+++ b/src/apache2_module/Configuration.cpp
@@ -68,6 +68,11 @@ namespace Passenger { ServerConfig serverConfig; }
 #define DEFINE_DIR_STR_CONFIG_SETTER(functionName, fieldName)                    \
 	static const char *                                                      \
 	functionName(cmd_parms *cmd, void *pcfg, const char *arg) {              \
+		if (serverConfig.disableHtaccess) {                                  \
+			const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);    \
+			if (err)                                                         \
+				return err;                                                  \
+		}                                                                    \
 		DirConfig *config = (DirConfig *) pcfg;                          \
 		config->fieldName = arg;                                         \
 		return NULL;                                                     \
@@ -107,6 +112,11 @@ namespace Passenger { ServerConfig serverConfig; }
 #define DEFINE_DIR_THREEWAY_CONFIG_SETTER(functionName, fieldName)           \
 	static const char *                                                  \
 	functionName(cmd_parms *cmd, void *pcfg, const char *arg) {          \
+		if (serverConfig.disableHtaccess) {                                  \
+			const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);    \
+			if (err)                                                         \
+				return err;                                                  \
+		}                                                                    \
 		DirConfig *config = (DirConfig *) pcfg;                      \
 		if (arg) {                                                   \
 			config->fieldName = DirConfig::ENABLED;              \
@@ -312,6 +322,7 @@ DEFINE_SERVER_STR_CONFIG_SETTER(cmd_union_station_proxy_address, unionStationPro
 DEFINE_SERVER_STR_CONFIG_SETTER(cmd_passenger_analytics_log_user, analyticsLogUser)
 DEFINE_SERVER_STR_CONFIG_SETTER(cmd_passenger_analytics_log_group, analyticsLogGroup)
 DEFINE_SERVER_BOOLEAN_CONFIG_SETTER(cmd_passenger_turbocaching, turbocaching)
+DEFINE_SERVER_BOOLEAN_CONFIG_SETTER(cmd_passenger_disable_htaccess, disableHtaccess)
 
 static const char *
 cmd_passenger_ctl(cmd_parms *cmd, void *dummy, const char *name, const char *value) {
@@ -358,6 +369,11 @@ cmd_passenger_spawn_method(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_base_uri(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	if (strlen(arg) == 0) {
 		return "PassengerBaseURI may not be set to the empty string";
@@ -373,6 +389,11 @@ cmd_passenger_base_uri(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_union_station_filter(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	if (strlen(arg) == 0) {
 		return "UnionStationFilter may not be set to the empty string";
@@ -571,6 +592,11 @@ const command_rec passenger_commands[] = {
 		NULL,
 		RSRC_CONF,
 		"Whether to enable turbocaching."),
+	AP_INIT_FLAG("PassengerDisableHtaccess",
+		(FlagFunc) cmd_passenger_disable_htaccess,
+		NULL,
+		RSRC_CONF,
+		"Disallow Phusion Passenger directives in .htaccess files."),
 
 	#include "ConfigurationCommands.cpp"
 
diff --git a/src/apache2_module/Configuration.hpp b/src/apache2_module/Configuration.hpp
index 034a42c5d..e53a9fae5 100644
--- a/src/apache2_module/Configuration.hpp
+++ b/src/apache2_module/Configuration.hpp
@@ -209,6 +209,9 @@ struct ServerConfig {
 
 	bool turbocaching;
 
+	/** Disallow Passenger directives in .htaccess files */
+	bool disableHtaccess;
+
 	set<string> prestartURLs;
 
 	ServerConfig() {
@@ -234,6 +237,7 @@ struct ServerConfig {
 		analyticsLogUser   = DEFAULT_ANALYTICS_LOG_USER;
 		analyticsLogGroup  = DEFAULT_ANALYTICS_LOG_GROUP;
 		turbocaching       = true;
+		disableHtaccess    = false;
 	}
 
 	/** Called after the configuration files have been loaded, inside
diff --git a/src/apache2_module/ConfigurationFields.hpp b/src/apache2_module/ConfigurationFields.hpp
index c22573ba6..013e7fb3e 100644
--- a/src/apache2_module/ConfigurationFields.hpp
+++ b/src/apache2_module/ConfigurationFields.hpp
@@ -85,6 +85,11 @@ struct GeneratedDirConfigPart {
 	 */
 	Threeway stickySessionsCookieName;
 
+    /*
+     * Disallow Phusion Passenger directives in .htaccess files.
+     */
+    Threeway disableHtaccess;
+
 	/*
 	 * Force Passenger to believe that an application process can handle the given number of concurrent requests per process
 	 */
diff --git a/src/apache2_module/ConfigurationSetters.cpp.cxxcodebuilder b/src/apache2_module/ConfigurationSetters.cpp.cxxcodebuilder
index 2fdf1cd9b..8d70ef596 100644
--- a/src/apache2_module/ConfigurationSetters.cpp.cxxcodebuilder
+++ b/src/apache2_module/ConfigurationSetters.cpp.cxxcodebuilder
@@ -52,6 +52,13 @@ def main
 
     if option[:type] == :string
       function("static const char *#{func_name}(cmd_parms *cmd, void *pcfg, const char *arg)", %Q{
+
+        if (serverConfig.disableHtaccess) {
+          const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+          if (err)
+            return err;
+        }
+
         DirConfig *config = (DirConfig *) pcfg;
         config->#{struct_field_for(option)} = arg;
         return NULL;
@@ -59,6 +66,12 @@ def main
     elsif option[:type] == :integer
       function "static const char *#{func_name}(cmd_parms *cmd, void *pcfg, const char *arg)" do
         add_code %q[
+          if (serverConfig.disableHtaccess) {
+            const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+            if (err)
+              return err;
+          }
+
           DirConfig *config = (DirConfig *) pcfg;
           char *end;
           long result;
@@ -98,6 +111,12 @@ def main
       end
     elsif option[:type] == :flag
       function("static const char *#{func_name}(cmd_parms *cmd, void *pcfg, const char *arg)", %Q{
+        if (serverConfig.disableHtaccess) {
+          const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+          if (err)
+            return err;
+        }
+
         DirConfig *config = (DirConfig *) pcfg;
         config->#{struct_field_for(option)} =
           arg ?
diff --git a/src/apache2_module/Hooks.cpp b/src/apache2_module/Hooks.cpp
index ac5c89f1f..ea455f075 100644
--- a/src/apache2_module/Hooks.cpp
+++ b/src/apache2_module/Hooks.cpp
@@ -1324,6 +1324,7 @@ public:
 			.set    ("union_station_gateway_cert", serverConfig.unionStationGatewayCert)
 			.set    ("union_station_proxy_address", serverConfig.unionStationProxyAddress)
 			.setBool("turbocaching", serverConfig.turbocaching)
+			.setBool("disableHtaccess", serverConfig.disableHtaccess)
 			.setStrSet("prestart_urls", serverConfig.prestartURLs);
 
 		if (serverConfig.logFile != NULL) {
-- 
2.14.2


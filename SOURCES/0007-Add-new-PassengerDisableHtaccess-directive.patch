From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tim Mullin <tim@cpanel.net>
Date: Mon, 17 Sep 2018 15:45:21 -0500
Subject: [PATCH 7/7] Add new 'PassengerDisableHtaccess' directive

The original patch for this had to be changed since the
code it patched had been re-factored.

Comment from original patch:

Author: Rishwanth Yeddula <rish@cpanel.net>
Date:   Thu Jun 15 13:23:10 2017 -0500

    Add new 'PassengerDisableHtaccess' directive

    Case PIG-3283: Add a 'PassengerDisableHtaccess' directive that lets
    server administrators to control whether mod_passenger should allow
    the Passenger directives to be set in the .htaccess files.

    Case PIG-3630: Ensure that the directives with handlers defined outside
    the ConfigurationSetters code are properly checked and disallowed:

    Directives that are handled via the 'DEFINE_DIR_STR_CONFIG_SETTER' macro:

        * PassengerAppRoot
        * UnionStationKey

    Directives that are handled via the 'DEFINE_DIR_THREEWAY_CONFIG_SETTER' macro:

        * PassengerResolveSymlinksInDocumentRoot
        * PassengerAllowEncodedSlashes
        * UnionStationSupport
        * PassengerBufferResponse

    Directives with custom handlers:

        * PassengerBaseURI
        * UnionStationFilter
---
 src/apache2_module/Config.cpp                 |   6 +
 .../AutoGeneratedDefinitions.cpp              |   5 +
 ...eneratedManifestDefaultsInitialization.cpp |   5 +
 .../AutoGeneratedSetterFuncs.cpp              | 300 ++++++++++++++++++
 ...utoGeneratedSetterFuncs.cpp.cxxcodebuilder |   8 +
 src/apache2_module/Hooks.cpp                  |   1 +
 .../AutoGeneratedManifestGeneration.cpp       |   9 +
 .../ServerConfig/AutoGeneratedStruct.h        |  11 +
 .../apache2/config_options.rb                 |   8 +
 9 files changed, 353 insertions(+)

diff --git a/src/apache2_module/Config.cpp b/src/apache2_module/Config.cpp
index bd45056..9e744ab 100644
--- a/src/apache2_module/Config.cpp
+++ b/src/apache2_module/Config.cpp
@@ -229,6 +229,12 @@ cmd_passenger_base_uri(cmd_parms *cmd, void *pcfg, const char *arg) {
 	if (err != NULL) {
 		return err;
 	}
+	if (serverConfig.disableHtaccess) {
+		err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err != NULL) {
+			return err;
+		}
+	}
 
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBaseURIsSourceFile = cmd->directive->filename;
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
index b27a56f..376376c 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
@@ -153,6 +153,11 @@ AP_INIT_TAKE1("PassengerDefaultUser",
 	NULL,
 	RSRC_CONF,
 	"The user that Phusion Passenger applications must run as when user switching fails or is disabled."),
+AP_INIT_FLAG("PassengerDisableHtaccess",
+	(FlagFunc) cmd_passenger_disable_htaccess,
+	NULL,
+	RSRC_CONF,
+	"Disallow Phusion Passenger directives in .htaccess files."),
 AP_INIT_FLAG("PassengerDisableSecurityUpdateCheck",
 	(FlagFunc) cmd_passenger_disable_security_update_check,
 	NULL,
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
index 4ea5b9a..8485158 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
@@ -68,6 +68,11 @@ ConfigManifestGenerator::autoGenerated_setGlobalConfigDefaults() {
 		"PassengerDefaultUser",
 		PASSENGER_DEFAULT_USER);
 
+	addOptionsContainerStaticDefaultBool(
+		globalConfigContainer,
+		"PassengerDisableHtaccess",
+		false);
+
 	addOptionsContainerStaticDefaultBool(
 		globalConfigContainer,
 		"PassengerDisableSecurityUpdateCheck",
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
index 372b25e..a18fed8 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
@@ -40,6 +40,11 @@
 
 static const char *
 cmd_passenger_admin_panel_auth_type(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -55,6 +60,11 @@ cmd_passenger_admin_panel_auth_type(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_admin_panel_password(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -70,6 +80,11 @@ cmd_passenger_admin_panel_password(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_admin_panel_url(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -85,6 +100,11 @@ cmd_passenger_admin_panel_url(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_admin_panel_username(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -100,6 +120,11 @@ cmd_passenger_admin_panel_username(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_allow_encoded_slashes(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mAllowEncodedSlashesSourceFile = cmd->directive->filename;
 	config->mAllowEncodedSlashesSourceLine = cmd->directive->line_num;
@@ -127,6 +152,11 @@ cmd_passenger_analytics_log_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_env(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -142,6 +172,11 @@ cmd_passenger_app_env(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_group_name(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -157,6 +192,11 @@ cmd_passenger_app_group_name(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_root(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -172,6 +212,11 @@ cmd_passenger_app_root(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_type(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -187,6 +232,11 @@ cmd_passenger_app_type(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_buffer_response(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBufferResponseSourceFile = cmd->directive->filename;
 	config->mBufferResponseSourceLine = cmd->directive->line_num;
@@ -200,6 +250,11 @@ cmd_passenger_buffer_response(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_buffer_upload(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBufferUploadSourceFile = cmd->directive->filename;
 	config->mBufferUploadSourceLine = cmd->directive->line_num;
@@ -213,6 +268,11 @@ cmd_passenger_buffer_upload(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_data_buffer_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -228,6 +288,11 @@ cmd_passenger_data_buffer_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_group(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -243,6 +308,11 @@ cmd_passenger_default_group(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -258,6 +328,11 @@ cmd_passenger_default_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_user(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -271,8 +346,33 @@ cmd_passenger_default_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 	return NULL;
 }
 
+static const char *
+cmd_passenger_disable_htaccess(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
+	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+	if (err != NULL) {
+		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
+			"WARNING: %s", err);
+	}
+
+	serverConfig.disableHtaccessSourceFile = cmd->directive->filename;
+	serverConfig.disableHtaccessSourceLine = cmd->directive->line_num;
+	serverConfig.disableHtaccessExplicitlySet = true;
+	serverConfig.disableHtaccess = arg != NULL;
+	return NULL;
+}
+
 static const char *
 cmd_passenger_disable_security_update_check(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -288,6 +388,11 @@ cmd_passenger_disable_security_update_check(cmd_parms *cmd, void *pcfg, const ch
 
 static const char *
 cmd_passenger_dump_config_manifest(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -303,6 +408,11 @@ cmd_passenger_dump_config_manifest(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_enabled(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mEnabledSourceFile = cmd->directive->filename;
 	config->mEnabledSourceLine = cmd->directive->line_num;
@@ -316,6 +426,11 @@ cmd_passenger_enabled(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_error_override(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mErrorOverrideSourceFile = cmd->directive->filename;
 	config->mErrorOverrideSourceLine = cmd->directive->line_num;
@@ -329,6 +444,11 @@ cmd_passenger_error_override(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_file_descriptor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -344,6 +464,11 @@ cmd_passenger_file_descriptor_log_file(cmd_parms *cmd, void *pcfg, const char *a
 
 static const char *
 cmd_passenger_force_max_concurrent_requests_per_process(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -358,6 +483,11 @@ cmd_passenger_force_max_concurrent_requests_per_process(cmd_parms *cmd, void *pc
 
 static const char *
 cmd_passenger_friendly_error_pages(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -376,6 +506,11 @@ cmd_passenger_friendly_error_pages(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_group(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -391,6 +526,11 @@ cmd_passenger_group(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_high_performance(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mHighPerformanceSourceFile = cmd->directive->filename;
 	config->mHighPerformanceSourceLine = cmd->directive->line_num;
@@ -404,6 +544,11 @@ cmd_passenger_high_performance(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_instance_registry_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -419,6 +564,11 @@ cmd_passenger_instance_registry_dir(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_load_shell_envvars(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -437,6 +587,11 @@ cmd_passenger_load_shell_envvars(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -452,6 +607,11 @@ cmd_passenger_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_log_level(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -466,6 +626,11 @@ cmd_passenger_log_level(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_lve_min_uid(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -480,6 +645,11 @@ cmd_passenger_lve_min_uid(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_max_instances_per_app(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -494,6 +664,11 @@ cmd_passenger_max_instances_per_app(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_max_pool_size(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -508,6 +683,11 @@ cmd_passenger_max_pool_size(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_max_preloader_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -522,6 +702,11 @@ cmd_passenger_max_preloader_idle_time(cmd_parms *cmd, void *pcfg, const char *ar
 
 static const char *
 cmd_passenger_max_request_queue_size(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -536,6 +721,11 @@ cmd_passenger_max_request_queue_size(cmd_parms *cmd, void *pcfg, const char *arg
 
 static const char *
 cmd_passenger_max_requests(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -550,6 +740,11 @@ cmd_passenger_max_requests(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_meteor_app_settings(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -565,6 +760,11 @@ cmd_passenger_meteor_app_settings(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_min_instances(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -579,6 +779,11 @@ cmd_passenger_min_instances(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_monitor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -594,6 +799,11 @@ cmd_passenger_monitor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_nodejs(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -609,6 +819,11 @@ cmd_passenger_nodejs(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_pool_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -623,6 +838,11 @@ cmd_passenger_pool_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_pre_start(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -638,6 +858,11 @@ cmd_passenger_pre_start(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_python(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -653,6 +878,11 @@ cmd_passenger_python(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_response_buffer_high_watermark(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -667,6 +897,11 @@ cmd_passenger_response_buffer_high_watermark(cmd_parms *cmd, void *pcfg, const c
 
 static const char *
 cmd_passenger_restart_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -682,6 +917,11 @@ cmd_passenger_restart_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_root(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -697,6 +937,11 @@ cmd_passenger_root(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -712,6 +957,11 @@ cmd_passenger_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_security_update_check_proxy(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -727,6 +977,11 @@ cmd_passenger_security_update_check_proxy(cmd_parms *cmd, void *pcfg, const char
 
 static const char *
 cmd_passenger_show_version_in_header(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -742,6 +997,11 @@ cmd_passenger_show_version_in_header(cmd_parms *cmd, void *pcfg, const char *arg
 
 static const char *
 cmd_passenger_socket_backlog(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -756,6 +1016,11 @@ cmd_passenger_socket_backlog(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_start_timeout(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -770,6 +1035,11 @@ cmd_passenger_start_timeout(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_startup_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -785,6 +1055,11 @@ cmd_passenger_startup_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_stat_throttle_rate(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -799,6 +1074,11 @@ cmd_passenger_stat_throttle_rate(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_sticky_sessions(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mStickySessionsSourceFile = cmd->directive->filename;
 	config->mStickySessionsSourceLine = cmd->directive->line_num;
@@ -812,6 +1092,11 @@ cmd_passenger_sticky_sessions(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_sticky_sessions_cookie_name(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mStickySessionsCookieNameSourceFile = cmd->directive->filename;
 	config->mStickySessionsCookieNameSourceLine = cmd->directive->line_num;
@@ -822,6 +1107,11 @@ cmd_passenger_sticky_sessions_cookie_name(cmd_parms *cmd, void *pcfg, const char
 
 static const char *
 cmd_passenger_turbocaching(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -844,6 +1134,11 @@ cmd_passenger_use_global_queue(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_user(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -859,6 +1154,11 @@ cmd_passenger_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_user_switching(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
index e594450..b3fd5f2 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
@@ -107,6 +107,14 @@ def setter_function_body_for(option)
     return
   end
 
+  add_code %Q{
+    if (serverConfig.disableHtaccess) {
+      const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+      if (err)
+        return err;
+    }
+  }
+
   case option[:context]
   when :global
     # We only warn here instead of returning an error because this issue
diff --git a/src/apache2_module/Hooks.cpp b/src/apache2_module/Hooks.cpp
index f233ef6..1aa5b49 100644
--- a/src/apache2_module/Hooks.cpp
+++ b/src/apache2_module/Hooks.cpp
@@ -1330,6 +1330,7 @@ public:
 		config["response_buffer_high_watermark"] = serverConfig.responseBufferHighWatermark;
 		config["stat_throttle_rate"] = serverConfig.statThrottleRate;
 		config["turbocaching"] = serverConfig.turbocaching;
+		config["disableHtaccess"] = serverConfig.disableHtaccess;
 		config["prestart_urls"] = strsetToJson(serverConfig.prestartURLs);
 		config["admin_panel_url"] = nonEmptyString(serverConfig.adminPanelUrl);
 		config["admin_panel_auth_type"] = nonEmptyString(serverConfig.adminPanelAuthType);
diff --git a/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp b/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
index b03780a..84897bb 100644
--- a/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
+++ b/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
@@ -135,6 +135,15 @@ ConfigManifestGenerator::autoGenerated_generateConfigManifestForServerConfig() {
 			serverConfig.defaultUser.data(),
 			serverConfig.defaultUser.data() + serverConfig.defaultUser.size());
 	}
+	if (serverConfig.disableHtaccessExplicitlySet) {
+		Json::Value &optionContainer = findOrCreateOptionContainer(globalOptionsContainer,
+			"PassengerDisableHtaccess",
+			sizeof("PassengerDisableHtaccess") - 1);
+		Json::Value &hierarchyMember = addOptionContainerHierarchyMember(optionContainer,
+			serverConfig.disableHtaccessSourceFile,
+			serverConfig.disableHtaccessSourceLine);
+		hierarchyMember["value"] = serverConfig.disableHtaccess == Apache2Module::ENABLED;
+	}
 	if (serverConfig.disableSecurityUpdateCheckExplicitlySet) {
 		Json::Value &optionContainer = findOrCreateOptionContainer(globalOptionsContainer,
 			"PassengerDisableSecurityUpdateCheck",
diff --git a/src/apache2_module/ServerConfig/AutoGeneratedStruct.h b/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
index 0e31f61..745055f 100644
--- a/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
+++ b/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
@@ -39,6 +39,11 @@
 
 struct AutoGeneratedServerConfig {
 
+	/*
+	 * Disallow Phusion Passenger directives in .htaccess files.
+	 */
+	bool disableHtaccess;
+
 	/*
 	 * Whether to disable the Phusion Passenger security update check & notification.
 	 */
@@ -170,6 +175,7 @@ struct AutoGeneratedServerConfig {
 	std::set<std::string> prestartURLs;
 
 
+	StaticString disableHtaccessSourceFile;
 	StaticString disableSecurityUpdateCheckSourceFile;
 	StaticString showVersionInHeaderSourceFile;
 	StaticString turbocachingSourceFile;
@@ -197,6 +203,7 @@ struct AutoGeneratedServerConfig {
 	StaticString securityUpdateCheckProxySourceFile;
 	StaticString prestartURLsSourceFile;
 
+	unsigned int disableHtaccessSourceLine;
 	unsigned int disableSecurityUpdateCheckSourceLine;
 	unsigned int showVersionInHeaderSourceLine;
 	unsigned int turbocachingSourceLine;
@@ -224,6 +231,7 @@ struct AutoGeneratedServerConfig {
 	unsigned int securityUpdateCheckProxySourceLine;
 	unsigned int prestartURLsSourceLine;
 
+	bool disableHtaccessExplicitlySet: 1;
 	bool disableSecurityUpdateCheckExplicitlySet: 1;
 	bool showVersionInHeaderExplicitlySet: 1;
 	bool turbocachingExplicitlySet: 1;
@@ -253,6 +261,7 @@ struct AutoGeneratedServerConfig {
 
 
 	AutoGeneratedServerConfig() {
+		disableHtaccess = false;
 		disableSecurityUpdateCheck = false;
 		showVersionInHeader = true;
 		turbocaching = true;
@@ -306,6 +315,7 @@ struct AutoGeneratedServerConfig {
 		 * prestartURLs: default initialized
 		 */
 
+		disableHtaccessSourceLine = 0;
 		disableSecurityUpdateCheckSourceLine = 0;
 		showVersionInHeaderSourceLine = 0;
 		turbocachingSourceLine = 0;
@@ -333,6 +343,7 @@ struct AutoGeneratedServerConfig {
 		securityUpdateCheckProxySourceLine = 0;
 		prestartURLsSourceLine = 0;
 
+		disableHtaccessExplicitlySet = false;
 		disableSecurityUpdateCheckExplicitlySet = false;
 		showVersionInHeaderExplicitlySet = false;
 		turbocachingExplicitlySet = false;
diff --git a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
index 53161a7..2e30d47 100644
--- a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
+++ b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
@@ -250,6 +250,14 @@ APACHE2_CONFIGURATION_OPTIONS = [
     :default   => true,
     :desc      => "Whether to enable turbocaching in #{PROGRAM_NAME}."
   },
+  {
+    :name      => 'PassengerDisableHtaccess',
+    :type      => :flag,
+    :context   => :global,
+    :default   => false,
+    :field     => 'disableHtaccess',
+    :desc      => 'Disallow Phusion Passenger directives in .htaccess files.',
+  },
   {
     :name      => 'PassengerShowVersionInHeader',
     :type      => :flag,

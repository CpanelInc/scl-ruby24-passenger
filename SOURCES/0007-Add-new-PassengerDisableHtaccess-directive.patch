From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tim Mullin <tim@cpanel.net>
Date: Mon, 30 Mar 2020 13:33:01 -0500
Subject: [PATCH 7/7] Add new 'PassengerDisableHtaccess' directive

The original patch for this had to be changed since the
code it patched had been re-factored.

Comment from original patch:

Author: Rishwanth Yeddula <rish@cpanel.net>
Date:   Thu Jun 15 13:23:10 2017 -0500

    Add new 'PassengerDisableHtaccess' directive

    Case PIG-3283: Add a 'PassengerDisableHtaccess' directive that lets
    server administrators to control whether mod_passenger should allow
    the Passenger directives to be set in the .htaccess files.

    Case PIG-3630: Ensure that the directives with handlers defined outside
    the ConfigurationSetters code are properly checked and disallowed:

    Directives that are handled via the 'DEFINE_DIR_STR_CONFIG_SETTER' macro:

        * PassengerAppRoot
        * UnionStationKey

    Directives that are handled via the 'DEFINE_DIR_THREEWAY_CONFIG_SETTER' macro:

        * PassengerResolveSymlinksInDocumentRoot
        * PassengerAllowEncodedSlashes
        * UnionStationSupport
        * PassengerBufferResponse

    Directives with custom handlers:

        * PassengerBaseURI
        * UnionStationFilter
---
 src/apache2_module/Config.cpp                             | 6 ++++++
 .../AutoGeneratedSetterFuncs.cpp.cxxcodebuilder           | 8 ++++++++
 src/apache2_module/Hooks.cpp                              | 1 +
 .../phusion_passenger/apache2/config_options.rb           | 8 ++++++++
 4 files changed, 23 insertions(+)

diff --git a/src/apache2_module/Config.cpp b/src/apache2_module/Config.cpp
index 86b0a63..e012f99 100644
--- a/src/apache2_module/Config.cpp
+++ b/src/apache2_module/Config.cpp
@@ -232,6 +232,12 @@ cmd_passenger_base_uri(cmd_parms *cmd, void *pcfg, const char *arg) {
 	if (err != NULL) {
 		return err;
 	}
+	if (serverConfig.disableHtaccess) {
+		err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err != NULL) {
+			return err;
+		}
+	}
 
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBaseURIsSourceFile = cmd->directive->filename;
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
index b94a0d0..e0333c3 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
@@ -137,6 +137,14 @@ def setter_function_body_for(option)
     return
   end
 
+  add_code %Q{
+    if (serverConfig.disableHtaccess) {
+      const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+      if (err)
+        return err;
+    }
+  }
+
   case option[:context]
   when :global
     # We only warn here instead of returning an error because this issue
diff --git a/src/apache2_module/Hooks.cpp b/src/apache2_module/Hooks.cpp
index 7884f5a..101f479 100644
--- a/src/apache2_module/Hooks.cpp
+++ b/src/apache2_module/Hooks.cpp
@@ -1354,6 +1354,7 @@ public:
 		config["response_buffer_high_watermark"] = serverConfig.responseBufferHighWatermark;
 		config["stat_throttle_rate"] = serverConfig.statThrottleRate;
 		config["turbocaching"] = serverConfig.turbocaching;
+		config["disableHtaccess"] = serverConfig.disableHtaccess;
 		config["prestart_urls"] = strsetToJson(serverConfig.prestartURLs);
 		config["admin_panel_url"] = nonEmptyString(serverConfig.adminPanelUrl);
 		config["admin_panel_auth_type"] = nonEmptyString(serverConfig.adminPanelAuthType);
diff --git a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
index 933d12d..8e77c24 100644
--- a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
+++ b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
@@ -277,6 +277,14 @@
     :default   => true,
     :desc      => "Whether to enable turbocaching in #{PROGRAM_NAME}."
   },
+  {
+    :name      => 'PassengerDisableHtaccess',
+    :type      => :flag,
+    :context   => :global,
+    :default   => false,
+    :field     => 'disableHtaccess',
+    :desc      => 'Disallow Phusion Passenger directives in .htaccess files.',
+  },
   {
     :name      => 'PassengerShowVersionInHeader',
     :type      => :flag,

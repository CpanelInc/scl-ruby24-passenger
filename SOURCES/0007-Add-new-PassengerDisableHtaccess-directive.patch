From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tim Mullin <tim@cpanel.net>
Date: Fri, 2 Nov 2018 18:59:45 -0500
Subject: [PATCH 7/7] Add new 'PassengerDisableHtaccess' directive

The original patch for this had to be changed since the
code it patched had been re-factored.

Comment from original patch:

Author: Rishwanth Yeddula <rish@cpanel.net>
Date:   Thu Jun 15 13:23:10 2017 -0500

    Add new 'PassengerDisableHtaccess' directive

    Case PIG-3283: Add a 'PassengerDisableHtaccess' directive that lets
    server administrators to control whether mod_passenger should allow
    the Passenger directives to be set in the .htaccess files.

    Case PIG-3630: Ensure that the directives with handlers defined outside
    the ConfigurationSetters code are properly checked and disallowed:

    Directives that are handled via the 'DEFINE_DIR_STR_CONFIG_SETTER' macro:

        * PassengerAppRoot
        * UnionStationKey

    Directives that are handled via the 'DEFINE_DIR_THREEWAY_CONFIG_SETTER' macro:

        * PassengerResolveSymlinksInDocumentRoot
        * PassengerAllowEncodedSlashes
        * UnionStationSupport
        * PassengerBufferResponse

    Directives with custom handlers:

        * PassengerBaseURI
        * UnionStationFilter
---
 src/apache2_module/Config.cpp                 |   6 +
 .../AutoGeneratedDefinitions.cpp              |   5 +
 ...eneratedManifestDefaultsInitialization.cpp |   5 +
 .../AutoGeneratedSetterFuncs.cpp              | 310 ++++++++++++++++++
 ...utoGeneratedSetterFuncs.cpp.cxxcodebuilder |   8 +
 src/apache2_module/Hooks.cpp                  |   1 +
 .../AutoGeneratedManifestGeneration.cpp       |   9 +
 .../ServerConfig/AutoGeneratedStruct.h        |  11 +
 .../apache2/config_options.rb                 |   8 +
 9 files changed, 363 insertions(+)

diff --git a/src/apache2_module/Config.cpp b/src/apache2_module/Config.cpp
index a50c6d2..4ce3568 100644
--- a/src/apache2_module/Config.cpp
+++ b/src/apache2_module/Config.cpp
@@ -232,6 +232,12 @@ cmd_passenger_base_uri(cmd_parms *cmd, void *pcfg, const char *arg) {
 	if (err != NULL) {
 		return err;
 	}
+	if (serverConfig.disableHtaccess) {
+		err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err != NULL) {
+			return err;
+		}
+	}
 
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBaseURIsSourceFile = cmd->directive->filename;
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
index 4a8094b..b939601 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
@@ -172,6 +172,11 @@ extern "C" const command_rec passenger_commands[] = {
 		NULL,
 		RSRC_CONF,
 		"Whether to disable Phusion Passenger anonymous telemetry."),
+	AP_INIT_FLAG("PassengerDisableHtaccess",
+		(FlagFunc) cmd_passenger_disable_htaccess,
+		NULL,
+		RSRC_CONF,
+		"Disallow Phusion Passenger directives in .htaccess files."),
 	AP_INIT_FLAG("PassengerDisableSecurityUpdateCheck",
 		(FlagFunc) cmd_passenger_disable_security_update_check,
 		NULL,
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
index 6650d43..c405ace 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
@@ -73,6 +73,11 @@ ConfigManifestGenerator::autoGenerated_setGlobalConfigDefaults() {
 		"PassengerDisableAnonymousTelemetry",
 		false);
 
+	addOptionsContainerStaticDefaultBool(
+		globalConfigContainer,
+		"PassengerDisableHtaccess",
+		false);
+
 	addOptionsContainerStaticDefaultBool(
 		globalConfigContainer,
 		"PassengerDisableSecurityUpdateCheck",
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
index 5d8f764..2f88b6f 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp
@@ -58,6 +58,11 @@ namespace Apache2Module {
 
 static const char *
 cmd_passenger_admin_panel_auth_type(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -73,6 +78,11 @@ cmd_passenger_admin_panel_auth_type(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_admin_panel_password(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -88,6 +98,11 @@ cmd_passenger_admin_panel_password(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_admin_panel_url(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -103,6 +118,11 @@ cmd_passenger_admin_panel_url(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_admin_panel_username(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -118,6 +138,11 @@ cmd_passenger_admin_panel_username(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_allow_encoded_slashes(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mAllowEncodedSlashesSourceFile = cmd->directive->filename;
 	config->mAllowEncodedSlashesSourceLine = cmd->directive->line_num;
@@ -145,6 +170,11 @@ cmd_passenger_analytics_log_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_anonymous_telemetry_proxy(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -160,6 +190,11 @@ cmd_passenger_anonymous_telemetry_proxy(cmd_parms *cmd, void *pcfg, const char *
 
 static const char *
 cmd_passenger_app_env(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -175,6 +210,11 @@ cmd_passenger_app_env(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_group_name(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -190,6 +230,11 @@ cmd_passenger_app_group_name(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_root(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -205,6 +250,11 @@ cmd_passenger_app_root(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_app_type(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -220,6 +270,11 @@ cmd_passenger_app_type(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_buffer_response(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBufferResponseSourceFile = cmd->directive->filename;
 	config->mBufferResponseSourceLine = cmd->directive->line_num;
@@ -233,6 +288,11 @@ cmd_passenger_buffer_response(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_buffer_upload(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mBufferUploadSourceFile = cmd->directive->filename;
 	config->mBufferUploadSourceLine = cmd->directive->line_num;
@@ -246,6 +306,11 @@ cmd_passenger_buffer_upload(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_data_buffer_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -261,6 +326,11 @@ cmd_passenger_data_buffer_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_group(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -276,6 +346,11 @@ cmd_passenger_default_group(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -291,6 +366,11 @@ cmd_passenger_default_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_default_user(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -306,6 +386,11 @@ cmd_passenger_default_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_disable_anonymous_telemetry(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -319,8 +404,33 @@ cmd_passenger_disable_anonymous_telemetry(cmd_parms *cmd, void *pcfg, const char
 	return NULL;
 }
 
+static const char *
+cmd_passenger_disable_htaccess(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
+	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+	if (err != NULL) {
+		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
+			"WARNING: %s", err);
+	}
+
+	serverConfig.disableHtaccessSourceFile = cmd->directive->filename;
+	serverConfig.disableHtaccessSourceLine = cmd->directive->line_num;
+	serverConfig.disableHtaccessExplicitlySet = true;
+	serverConfig.disableHtaccess = arg != NULL;
+	return NULL;
+}
+
 static const char *
 cmd_passenger_disable_security_update_check(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -336,6 +446,11 @@ cmd_passenger_disable_security_update_check(cmd_parms *cmd, void *pcfg, const ch
 
 static const char *
 cmd_passenger_dump_config_manifest(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -351,6 +466,11 @@ cmd_passenger_dump_config_manifest(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_enabled(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mEnabledSourceFile = cmd->directive->filename;
 	config->mEnabledSourceLine = cmd->directive->line_num;
@@ -364,6 +484,11 @@ cmd_passenger_enabled(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_error_override(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mErrorOverrideSourceFile = cmd->directive->filename;
 	config->mErrorOverrideSourceLine = cmd->directive->line_num;
@@ -377,6 +502,11 @@ cmd_passenger_error_override(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_file_descriptor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -392,6 +522,11 @@ cmd_passenger_file_descriptor_log_file(cmd_parms *cmd, void *pcfg, const char *a
 
 static const char *
 cmd_passenger_force_max_concurrent_requests_per_process(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -406,6 +541,11 @@ cmd_passenger_force_max_concurrent_requests_per_process(cmd_parms *cmd, void *pc
 
 static const char *
 cmd_passenger_friendly_error_pages(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -424,6 +564,11 @@ cmd_passenger_friendly_error_pages(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_group(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -439,6 +584,11 @@ cmd_passenger_group(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_high_performance(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mHighPerformanceSourceFile = cmd->directive->filename;
 	config->mHighPerformanceSourceLine = cmd->directive->line_num;
@@ -452,6 +602,11 @@ cmd_passenger_high_performance(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_instance_registry_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -467,6 +622,11 @@ cmd_passenger_instance_registry_dir(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_load_shell_envvars(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -485,6 +645,11 @@ cmd_passenger_load_shell_envvars(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -500,6 +665,11 @@ cmd_passenger_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_log_level(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -514,6 +684,11 @@ cmd_passenger_log_level(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_lve_min_uid(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -528,6 +703,11 @@ cmd_passenger_lve_min_uid(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_max_instances_per_app(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -542,6 +722,11 @@ cmd_passenger_max_instances_per_app(cmd_parms *cmd, void *pcfg, const char *arg)
 
 static const char *
 cmd_passenger_max_pool_size(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -556,6 +741,11 @@ cmd_passenger_max_pool_size(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_max_preloader_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -570,6 +760,11 @@ cmd_passenger_max_preloader_idle_time(cmd_parms *cmd, void *pcfg, const char *ar
 
 static const char *
 cmd_passenger_max_request_queue_size(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -584,6 +779,11 @@ cmd_passenger_max_request_queue_size(cmd_parms *cmd, void *pcfg, const char *arg
 
 static const char *
 cmd_passenger_max_requests(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -598,6 +798,11 @@ cmd_passenger_max_requests(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_meteor_app_settings(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -613,6 +818,11 @@ cmd_passenger_meteor_app_settings(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_min_instances(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -627,6 +837,11 @@ cmd_passenger_min_instances(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_monitor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -642,6 +857,11 @@ cmd_passenger_monitor_log_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_nodejs(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -657,6 +877,11 @@ cmd_passenger_nodejs(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_pool_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -671,6 +896,11 @@ cmd_passenger_pool_idle_time(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_pre_start(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -686,6 +916,11 @@ cmd_passenger_pre_start(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_python(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -701,6 +936,11 @@ cmd_passenger_python(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_response_buffer_high_watermark(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -715,6 +955,11 @@ cmd_passenger_response_buffer_high_watermark(cmd_parms *cmd, void *pcfg, const c
 
 static const char *
 cmd_passenger_restart_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -730,6 +975,11 @@ cmd_passenger_restart_dir(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_root(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -745,6 +995,11 @@ cmd_passenger_root(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -760,6 +1015,11 @@ cmd_passenger_ruby(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_security_update_check_proxy(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -775,6 +1035,11 @@ cmd_passenger_security_update_check_proxy(cmd_parms *cmd, void *pcfg, const char
 
 static const char *
 cmd_passenger_show_version_in_header(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -790,6 +1055,11 @@ cmd_passenger_show_version_in_header(cmd_parms *cmd, void *pcfg, const char *arg
 
 static const char *
 cmd_passenger_socket_backlog(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -804,6 +1074,11 @@ cmd_passenger_socket_backlog(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_start_timeout(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -818,6 +1093,11 @@ cmd_passenger_start_timeout(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_startup_file(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -833,6 +1113,11 @@ cmd_passenger_startup_file(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_stat_throttle_rate(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -847,6 +1132,11 @@ cmd_passenger_stat_throttle_rate(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_sticky_sessions(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mStickySessionsSourceFile = cmd->directive->filename;
 	config->mStickySessionsSourceLine = cmd->directive->line_num;
@@ -860,6 +1150,11 @@ cmd_passenger_sticky_sessions(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_sticky_sessions_cookie_name(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	DirConfig *config = (DirConfig *) pcfg;
 	config->mStickySessionsCookieNameSourceFile = cmd->directive->filename;
 	config->mStickySessionsCookieNameSourceLine = cmd->directive->line_num;
@@ -870,6 +1165,11 @@ cmd_passenger_sticky_sessions_cookie_name(cmd_parms *cmd, void *pcfg, const char
 
 static const char *
 cmd_passenger_turbocaching(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
@@ -892,6 +1192,11 @@ cmd_passenger_use_global_queue(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_user(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, NOT_IN_FILES);
 	if (err != NULL) {
 		return err;
@@ -907,6 +1212,11 @@ cmd_passenger_user(cmd_parms *cmd, void *pcfg, const char *arg) {
 
 static const char *
 cmd_passenger_user_switching(cmd_parms *cmd, void *pcfg, const char *arg) {
+	if (serverConfig.disableHtaccess) {
+		const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+		if (err)
+			return err;
+	}
 	const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
 	if (err != NULL) {
 		ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, cmd->temp_pool,
diff --git a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
index b94a0d0..e0333c3 100644
--- a/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
+++ b/src/apache2_module/ConfigGeneral/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder
@@ -137,6 +137,14 @@ def setter_function_body_for(option)
     return
   end
 
+  add_code %Q{
+    if (serverConfig.disableHtaccess) {
+      const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);
+      if (err)
+        return err;
+    }
+  }
+
   case option[:context]
   when :global
     # We only warn here instead of returning an error because this issue
diff --git a/src/apache2_module/Hooks.cpp b/src/apache2_module/Hooks.cpp
index e4a2643..cdaf7e4 100644
--- a/src/apache2_module/Hooks.cpp
+++ b/src/apache2_module/Hooks.cpp
@@ -1338,6 +1338,7 @@ public:
 		config["response_buffer_high_watermark"] = serverConfig.responseBufferHighWatermark;
 		config["stat_throttle_rate"] = serverConfig.statThrottleRate;
 		config["turbocaching"] = serverConfig.turbocaching;
+		config["disableHtaccess"] = serverConfig.disableHtaccess;
 		config["prestart_urls"] = strsetToJson(serverConfig.prestartURLs);
 		config["admin_panel_url"] = nonEmptyString(serverConfig.adminPanelUrl);
 		config["admin_panel_auth_type"] = nonEmptyString(serverConfig.adminPanelAuthType);
diff --git a/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp b/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
index bb09fb9..6d8139a 100644
--- a/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
+++ b/src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
@@ -155,6 +155,15 @@ ConfigManifestGenerator::autoGenerated_generateConfigManifestForServerConfig() {
 			serverConfig.disableAnonymousTelemetrySourceLine);
 		hierarchyMember["value"] = serverConfig.disableAnonymousTelemetry == Apache2Module::ENABLED;
 	}
+	if (serverConfig.disableHtaccessExplicitlySet) {
+		Json::Value &optionContainer = findOrCreateOptionContainer(globalOptionsContainer,
+			"PassengerDisableHtaccess",
+			sizeof("PassengerDisableHtaccess") - 1);
+		Json::Value &hierarchyMember = addOptionContainerHierarchyMember(optionContainer,
+			serverConfig.disableHtaccessSourceFile,
+			serverConfig.disableHtaccessSourceLine);
+		hierarchyMember["value"] = serverConfig.disableHtaccess == Apache2Module::ENABLED;
+	}
 	if (serverConfig.disableSecurityUpdateCheckExplicitlySet) {
 		Json::Value &optionContainer = findOrCreateOptionContainer(globalOptionsContainer,
 			"PassengerDisableSecurityUpdateCheck",
diff --git a/src/apache2_module/ServerConfig/AutoGeneratedStruct.h b/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
index b1579e6..c594486 100644
--- a/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
+++ b/src/apache2_module/ServerConfig/AutoGeneratedStruct.h
@@ -62,6 +62,11 @@ struct AutoGeneratedServerConfig {
 	 */
 	bool disableAnonymousTelemetry;
 
+	/*
+	 * Disallow Phusion Passenger directives in .htaccess files.
+	 */
+	bool disableHtaccess;
+
 	/*
 	 * Whether to disable the Phusion Passenger security update check & notification.
 	 */
@@ -199,6 +204,7 @@ struct AutoGeneratedServerConfig {
 
 
 	StaticString disableAnonymousTelemetrySourceFile;
+	StaticString disableHtaccessSourceFile;
 	StaticString disableSecurityUpdateCheckSourceFile;
 	StaticString showVersionInHeaderSourceFile;
 	StaticString turbocachingSourceFile;
@@ -228,6 +234,7 @@ struct AutoGeneratedServerConfig {
 	StaticString prestartURLsSourceFile;
 
 	unsigned int disableAnonymousTelemetrySourceLine;
+	unsigned int disableHtaccessSourceLine;
 	unsigned int disableSecurityUpdateCheckSourceLine;
 	unsigned int showVersionInHeaderSourceLine;
 	unsigned int turbocachingSourceLine;
@@ -257,6 +264,7 @@ struct AutoGeneratedServerConfig {
 	unsigned int prestartURLsSourceLine;
 
 	bool disableAnonymousTelemetryExplicitlySet: 1;
+	bool disableHtaccessExplicitlySet: 1;
 	bool disableSecurityUpdateCheckExplicitlySet: 1;
 	bool showVersionInHeaderExplicitlySet: 1;
 	bool turbocachingExplicitlySet: 1;
@@ -288,6 +296,7 @@ struct AutoGeneratedServerConfig {
 
 	AutoGeneratedServerConfig() {
 		disableAnonymousTelemetry = false;
+		disableHtaccess = false;
 		disableSecurityUpdateCheck = false;
 		showVersionInHeader = true;
 		turbocaching = true;
@@ -345,6 +354,7 @@ struct AutoGeneratedServerConfig {
 		 */
 
 		disableAnonymousTelemetrySourceLine = 0;
+		disableHtaccessSourceLine = 0;
 		disableSecurityUpdateCheckSourceLine = 0;
 		showVersionInHeaderSourceLine = 0;
 		turbocachingSourceLine = 0;
@@ -374,6 +384,7 @@ struct AutoGeneratedServerConfig {
 		prestartURLsSourceLine = 0;
 
 		disableAnonymousTelemetryExplicitlySet = false;
+		disableHtaccessExplicitlySet = false;
 		disableSecurityUpdateCheckExplicitlySet = false;
 		showVersionInHeaderExplicitlySet = false;
 		turbocachingExplicitlySet = false;
diff --git a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
index 6096040..078102c 100644
--- a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
+++ b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb
@@ -263,6 +263,14 @@ APACHE2_CONFIGURATION_OPTIONS = [
     :default   => true,
     :desc      => "Whether to enable turbocaching in #{PROGRAM_NAME}."
   },
+  {
+    :name      => 'PassengerDisableHtaccess',
+    :type      => :flag,
+    :context   => :global,
+    :default   => false,
+    :field     => 'disableHtaccess',
+    :desc      => 'Disallow Phusion Passenger directives in .htaccess files.',
+  },
   {
     :name      => 'PassengerShowVersionInHeader',
     :type      => :flag,
